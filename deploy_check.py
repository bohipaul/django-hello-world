#!/usr/bin/env python
"""
Script de v√©rification avant d√©ploiement
"""
import subprocess
import sys
import os

def check_requirements():
    """V√©rifier que requirements.txt est valide"""
    print("üì¶ V√©rification de requirements.txt...")
    
    try:
        with open('requirements.txt', 'r') as f:
            requirements = f.read().strip().split('\n')
        
        print(f"‚úÖ {len(requirements)} d√©pendances trouv√©es:")
        for req in requirements:
            if req.strip():
                print(f"   - {req}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur requirements.txt: {e}")
        return False

def check_django_config():
    """V√©rifier la configuration Django"""
    print("\nüîß V√©rification de la configuration Django...")
    
    try:
        # Test Django check
        result = subprocess.run(['python', 'manage.py', 'check'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Configuration Django OK")
            return True
        else:
            print(f"‚ùå Erreur Django check: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors du check Django: {e}")
        return False

def check_database_config():
    """V√©rifier la configuration de base de donn√©es"""
    print("\nüóÑÔ∏è V√©rification de la configuration de base de donn√©es...")
    
    try:
        result = subprocess.run(['python', 'test_database_config.py'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Configuration base de donn√©es OK")
            print("   " + result.stdout.split('\n')[0])  # Premi√®re ligne
            return True
        else:
            print(f"‚ùå Erreur base de donn√©es: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur test base de donn√©es: {e}")
        return False

def check_dockerfile():
    """V√©rifier le Dockerfile"""
    print("\nüê≥ V√©rification du Dockerfile...")
    
    try:
        with open('Dockerfile', 'r') as f:
            content = f.read()
        
        # V√©rifier que le healthcheck n'utilise plus requests
        if 'import requests' in content:
            print("‚ùå Le Dockerfile utilise encore 'requests' dans le healthcheck")
            return False
        
        if 'urllib.request' in content:
            print("‚úÖ Healthcheck utilise urllib.request (biblioth√®que standard)")
            return True
        else:
            print("‚ö†Ô∏è Pas de healthcheck trouv√©")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lecture Dockerfile: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ V√©rification avant d√©ploiement\n")
    
    checks = [
        check_requirements,
        check_django_config,
        check_database_config,
        check_dockerfile
    ]
    
    all_ok = True
    for check in checks:
        if not check():
            all_ok = False
    
    print("\n" + "="*50)
    if all_ok:
        print("‚úÖ Toutes les v√©rifications sont OK - Pr√™t pour le d√©ploiement!")
        sys.exit(0)
    else:
        print("‚ùå Des probl√®mes ont √©t√© d√©tect√©s - Corrigez avant d√©ploiement")
        sys.exit(1)

if __name__ == '__main__':
    main()